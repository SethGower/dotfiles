# Shamelessly stolen from 
# https://github.com/zivv/UltiSnips/blob/master/vhdl.snippets
global !p
def split_line(text):
	import textwrap
	lines = textwrap.wrap(text, 50 - 19)
	output = list()
	for line in lines:
		output.append('-'*2 + ' '*17 + line)
	snip_line = snip.tabstops[4].end[0]
	snip.buffer.append(output, snip_line + 1)
	del snip.buffer[snip_line]
endglobal

post_jump "if snip.tabstop == 0 : split_line(snip.tabstops[4].current_text)"
snippet header "File header"
-------------------------------------------------
--  File:          `!p snip.rv = fn`
--
--  Entity:        `!p snip.rv = snip.fn.split(".")[0]`
--  Architecture:  ${1:BEHAVIORAL}
--  Author:        ${2:Andrew Ramsey}
--  Created:       `date +%m/%d/%y`
--  Modified:      ${3}
--  VHDL'93
--  Description:   The following is the entity and
--                 architectural description of a
--                 ${4:I need a really long default here so I don't have to type so much !}
-------------------------------------------------
${0}
endsnippet


snippet lib "library IEEE; | use IEEE.STD_LOGIC_1164.ALL;"
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
endsnippet

snippet uun "use IEEE.STD_LOGIC_UNSIGNED.ALL;"
use IEEE.STD_LOGIC_UNSIGNED.ALL;
endsnippet

snippet ent "entity ... ; | architecture ...;"
entity ${1:} is
	port(
	);
end $1;
architecture ${2:Behavioral} of $1 is
begin
end $2;
endsnippet

snippet l "std_logic"
std_logic
endsnippet

snippet lv "std_logic_vector(... downto 0)"
std_logic_vector(${VISUAL}${0} downto 0)
endsnippet

snippet with "with ... select"
with ${1} select
	${2} <=
endsnippet

snippet com "component"
component ${VISUAL}${0}
	Port(
	);
end component;
endsnippet

snippet pm "...: ... port map(...);"
${1}: ${2} port map(${3});
endsnippet

snippet type "type ... is (...);"
type ${1} is (${2});
endsnippet

snippet pro "... : process(...) ..."
${1}:process${2:(${VISUAL}${3})}
begin
${0}
end process;
endsnippet

snippet ifup "if (clk'event and clk = '1') then ..."
if (${1:clk}'event and $1 = '1') then
${VISUAL}${0}
end if;
endsnippet

snippet case "case ... is ..."
case ${VISUAL}${0} is
	when OTHERS => '0';
end case;
endsnippet

snippet var "variable"
variable
endsnippet

snippet sig "signal"
signal
endsnippet
