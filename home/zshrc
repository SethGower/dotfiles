# If wal is installed, use it
# [[ -x $(command -v wal) ]] &&(cat ~/.cache/wal/sequences &)
# Path to oh-my-zsh installation.
export ZSH=${HOME}/.oh-my-zsh
export ZSH_CUSTOM=$HOME/.custom_omz

# Add wisely, as too many plugins slow down shell startup.
plugins=(
    zsh-autosuggestions
    zsh-syntax-highlighting
    sudo
    direnv
)
ZSH_DISABLE_COMPFIX=true
source "$ZSH"/oh-my-zsh.sh
source ~/.function

source ~/.alias
source ~/.path

if [ -f ~/.localconfig ]; then
    source ~/.localconfig
fi

fpath+=$ZSH_CUSTOM/completions

compinit

if [[ -f ~/.fzf.zsh ]]; then
    source ~/.fzf.zsh
fi

zstyle ':completion:*:*:nvim:*' file-patterns '^*.(aux|pdf|dvi|o):source-files' '*:all-files'

if [[ -x "$(command -v starship)" ]]; then
    eval "$(starship init zsh)"
fi

# sets the EDITOR env variable. Used for git commits and the like
if [[ -n $(which nvim) ]]; then
    export EDITOR=nvim
elif [[ -n $(which vim) ]]; then
    export EDITOR=vim
fi
export VISUAL="$EDITOR"

# Use zkbd to on the fly load the appropriate scan codes for shortcuts and
# such. I found that HOME/END weren't working in ZSH in TMUX. So this will look
# for appropriately named files in ~/.zkbd and source them. If it can't find it
# (i.e. sourcing it fails) then the procedure to create it will be run. There
# is some manual intervention that will be needed. Right now I assumed that the
# DISPLAY doesn't matter when in a TMUX session, so when the xkbd file is
# created for a TMUX config, it will have to be renamed to chop off the display
# code. Honestly, the display is _probably_ useless anyway, but maybe not with
# different keyboards on different machines? The file path looks for the TMUX
# variable, if it is present the parameter eexpansion returns "TMUX", else it
# returns nothing. I didn't want to use the raw value of $TMUX since it is a
# path to the session socket, which isn't deterministic (for these purposes)
# source ~/.zkbd/$TERM-${${TMUX:+TMUX}:-${DISPLAY:t}} &> /dev/null
#
# if [[ $? == 0 ]]; then
#     [[ -n ${key[Left]} ]] && bindkey "${key[Left]}" backward-char
#     [[ -n ${key[Right]} ]] && bindkey "${key[Right]}" forward-char
#     [[ -n ${key[Home]} ]] && bindkey  "${key[Home]}" beginning-of-line
#     [[ -n ${key[End]} ]] && bindkey  "${key[End]}" end-of-line
# else
#     autoload zkbd ; zkbd
# fi

# Rename Zellij tabs based on the current directory
# Stolen from https://www.reddit.com/r/zellij/comments/10skez0/comment/jrimomm
zellij_tab_name_update() {
    if [[ -n $ZELLIJ ]]; then
        tab_name=''
        if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
            tab_name+=$(basename "$(git rev-parse --show-toplevel)")/
            tab_name+=$(git rev-parse --show-prefix)
            tab_name=${tab_name%/}
        else
            tab_name=$PWD
            if [[ $tab_name == $HOME ]]; then
                tab_name="~"
            else
                tab_name=${tab_name##*/}
            fi
        fi
        command nohup zellij action rename-tab "$tab_name" >/dev/null 2>&1
    fi
}

# run the tab name update at the beginning of the shell lifetime
zellij_tab_name_update

# tell zsh to always run the function whenever changing directories
chpwd_functions+=(zellij_tab_name_update)
