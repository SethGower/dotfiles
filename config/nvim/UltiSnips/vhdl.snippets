# Shamelessly stolen from
# https://github.com/zivv/UltiSnips/blob/master/vhdl.snippets
global !p
def split_line(text):
  	import textwrap
  	lines = textwrap.wrap(text, 50 - 19)
  	output = list()
  	for line in lines:
  	  	output.append('-'*2 + ' '*17 + line)
  	snip_line = snip.tabstops[4].end[0]
  	snip.buffer.append(output, snip_line + 1)
  	del snip.buffer[snip_line]
endglobal

post_jump "if snip.tabstop == 0 : split_line(snip.tabstops[2].current_text)"
snippet header "File header"
-------------------------------------------------
--  File:          `!p snip.rv = fn`
--
--  Entity:        `!p snip.rv = snip.fn.split(".")[0]`
--  Architecture:  ${1:BEHAVIORAL}
--  Author:        ${2:Seth Gower}
--  Created:       `date +%m/%d/%y`
--  Modified:      ${3}
--  VHDL'${5:2008}
--  Description:   The following is the entity and
--                 architectural description of a
--                 ${4:I need a really long default here so I don't have to type so much !}
-------------------------------------------------
${0}
endsnippet

post_jump "if snip.tabstop == 0 : split_line(snip.tabstops[4].current_text)"
snippet doxy_header "Doxygen style file header"

--------------------------------------------------------------------------------
--!\file `!p snip.rv = snip.fn`
--!\overview
--!\brief ${1:I need a really long default here so I don't have to type so much !}
--!\details ${2:I need a really long default here so I don't have to type so much !}
--! TODO
--------------------------------------------------------------------------------
${0}
endsnippet

snippet lib "library IEEE; | use IEEE.STD_LOGIC_1164.ALL;"
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
endsnippet

snippet ent "entity ... ; | architecture ...;"
entity ${1:} is
  	port(
  	);
end entity $1;
architecture ${2:Behavioral} of $1 is
begin
end $2;
endsnippet

snippet slv "std_logic_vector(... downto 0)"
std_logic_vector(${VISUAL}${0} downto 0)
endsnippet

snippet with "with ... select"
with ${1} select
  	${2} <=
endsnippet

snippet pm "...: ... port map(...);"
${1}: ${2} port map(${3});
endsnippet

snippet type "type ... is (...);"
type ${1} is (${2});
endsnippet

snippet pro "... : process(...) ..."
${1}:process${2:(${VISUAL}${3})}
begin
${0}
end process;
endsnippet

snippet ifup "if rising_edge(i_clk) then ..."
if rising_edge(${1:i_clk}) then
  	${VISUAL}${0}
end if;
endsnippet

snippet case "case ... is ..."
case ${VISUAL}${0} is
  	when OTHERS => '0';
end case;
endsnippet

snippet clock "clk_proccess:process..."
clk_process:process
begin
  	${1} <= '0';
  	wait for ${2}/2;
  	$1 <= '1';
  	wait for $2/2;
end process;
endsnippet

snippet func "function ${1} (${2})..."
function ${1}(${2}) return ${3} is
begin
${4}
end function $1;
endsnippet

